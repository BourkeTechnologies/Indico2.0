@using System.Web.Optimization


<!DOCTYPE html>

<html>
<head>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/js")
    <style type="text/css">
    body {
        background: #f2f2f2;
        background-size: cover;
        font-family: Arial;
    }

    .login-block {
        width: 400px;
        padding: 20px;
        background: #fff;
        border-radius: 5px;
        border-top: 10px solid rgb(56,75,87);
        border-left: 1px solid rgb(56,75,87);
        border-bottom: 1px solid rgb(56,75,87);
        border-right: 3px solid rgb(56,75,87);
        margin: 120px auto;
        padding-left: 40px;
        padding-right: 40px;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        text-align: center;
    }

    .login-block h1 {
        text-align: center;
        color: rgb(56,75,87);
        font-size: 18px;
        text-transform: uppercase;
        margin-top: 0;
        margin-bottom: 20px;
    }

    .login-block input {
        width: 100%;
        height: 42px;
        box-sizing: border-box;
        border-radius: 5px;
        border: 1px solid #ccc;
        margin-bottom: 20px;
        font-size: 14px;
        padding: 0 20px 0 50px;
        outline: none;
    }

    .login-block .username {
        background: #fff url('../Content/img/u0XmBmv.png') 20px top no-repeat;
        background-size: 16px 80px;
    }

    .login-block .username:focus {
        background: #fff url('../Content/img/u0XmBmv.png') 20px bottom no-repeat;
        background-size: 16px 80px;
    }

    .login-block .password {
        background: #fff url('../Content/img/Qf83FTt.png') 20px top no-repeat;
        background-size: 16px 80px;
    }

    .login-block .password:focus {
        background: #fff url('../Content/img/Qf83FTt.png') 20px bottom no-repeat;
        background-size: 16px 80px;
    }

    .login-block input:active, .login-block input:focus {
        border: 1px solid rgb(56,75,87);
    }

    .login-block button {
        width: 60%;
        height: 40px;
        background: rgb(56,75,87);
        box-sizing: border-box;
        border-radius: 5px;
        border: 1px solid rgb(56,75,87);
        color: #fff;
        font-weight: bold;
        text-transform: uppercase;
        font-size: 14px;
        outline: none;
        cursor: pointer;
        margin-left: 67px;
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19) !important;
        margin-bottom: 12px;
    }

    .login-block button:hover {
        background: #008cb3;
    }

    .back-login-header {
        width: 100%;    
        height: 40px;
        background-color: rgb(56,75,87);
        margin-bottom: 20px;
        border-radius: 5px;
    }

    .login-block h1 {
        padding-top: 8px;
        font-size: 22px;
        color: #fff;
    }
    #loginalert {
        display: none
    }
    </style>
</head>
 <!--Username-->

<body>
    <div class="login-block">
        <div id="login-banner" style="margin-bottom: 20px;">
            <div class="logo">
                <img src="~/Content/img/logo_transparent.png" class="img-rounded  center-block"/>
            </div>
            <div id="dvSTO" class="alert hide">
                <strong></strong>
            </div>
        </div>
        <div class="back-login-header">
            <h1>Login</h1>
        </div>
        <div class="alert alert-danger" id="loginalert"  role="alert" style="border: 1px solid #b30000;">
            <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
            <span class="sr-only">Error:</span>
            Invalid username or password.
        </div>
        <div class="control-group">
            <div class="controls">
                <input type="text" id="usernameinput" class="username" placeholder="Username" tabindex="1"/>
            </div>
        </div>
        <div class="control-group">
            <div class="controls">
                <input type="password" id="passwordinput" placeholder="Password" class="password" tabindex="2"/>
            </div>
        </div>
        <div class="form-actions">
            <button id="signinbutton" class="btn btn-primary btn-block btn-large" data-loading-text="Signing In ..." tabindex="3" type="submit">
                Sign In
            </button>
        </div>
        <span style="margin-top: 2px; color: #8c8c8c; font-size: 11px;" class="pull-right">indico 1.0</span>
    </div>
        
        <script type="text/javascript">
            $("#signinbutton").click(function (e) {
                var pwd = $("#passwordinput").val();
                var un = $("#usernameinput").val();
                $.ajax({
                    url: '@Url.Action("TryLogin", "Auth")',
                    type: "POST",
                    data: JSON.stringify({ userName: un, password: pwd }),
                    dataType: "json",
                    complete : function(data) {
                        var result = data.responseText;
                        if (result === "F") {
                            console.log(data);
                            $("#loginalert").fadeIn(500);
                        }
                       
                    }
                });
            });
        </script>
        @*<div class="login-block">
                <div id="login-banner" style="margin-bottom: 20px;">
                    <div class="logo">
                        <img src="~/Content/img/SCSI_logo.png" class="img-rounded  center-block" />
                    </div>
                    <div id="dvSTO" class="alert hide">
                        <strong></strong>
                    </div>
                </div>

                @if (Model.IsShowLogin)
                {
                    <div class="back-login-header">
                        <h1>Login</h1>
                    </div>
                    using (Html.BeginForm("Login", "Auth", FormMethod.Post, new { @class = "form-vertical", id = "formLogin" }))
                    {
                        if (Model.ErrorCode != Enums.ErrorCode.NoError)
                        {
                            if (Model.ErrorCode == Enums.ErrorCode.InvalidUsernameOrPassword)
                            {
                                <div class="alert alert-danger" role="alert" style="border: 1px solid #b30000;">
                                    <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                                    <span class="sr-only">Error:</span>
                                    Invalid username or password.
                                </div>
                            }

                            if (Model.ErrorCode == Enums.ErrorCode.UsernameAndPasswordCannotBeEmpty)
                            {
                                <div class="alert alert-danger" role="alert" style="border: 1px solid #b30000;">
                                    <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                                    <span class="sr-only">Error:</span>
                                    Username and Password cannot be empty.
                                </div>
                            }

                            if (Model.ErrorCode == Enums.ErrorCode.UsernameCannotBeEmpty)
                            {
                                <div class="alert alert-danger" role="alert" style="border: 1px solid #b30000;">
                                    <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                                    <span class="sr-only">Error:</span>
                                    Username cannot be empty.
                                </div>
                            }

                            if (Model.ErrorCode == Enums.ErrorCode.PasswordCannotBeEmpty)
                            {
                                <div class="alert alert-danger" role="alert" style="border: 1px solid #b30000;">
                                    <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                                    <span class="sr-only">Error:</span>
                                    Password cannot be empty.
                                </div>
                            }

                            @*if (Model.ErrorCode == Enums.ErrorCode.InvitedUser)
                            {
                                <div class="alert alert-danger" role="alert" style="border: 1px solid #b30000;">
                                    <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                                    <span class="sr-only">Error:</span>
                                    This user has been invited. Please check the email to activate the user acount.
                                </div>
                            }

                if (Model.ErrorCode == Enums.ErrorCode.InactiveUser)
                {
                                <div class="alert alert-danger" role="alert" style="border: 1px solid #b30000;">
                                    <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                                    <span class="sr-only">Error:</span>
                                    This user has been inactivated.
                                </div>
                }

                if (Model.ErrorCode == Enums.ErrorCode.DeletedUser)
                {
                                <div class="alert alert-danger" role="alert" style="border: 1px solid #b30000;">
                                    <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                                    <span class="sr-only">Error:</span>
                                    This user has been deleted from the system.
                                </div>
                            }

                            if (Model.ErrorCode == Enums.ErrorCode.UserDoesNotBelongsToAnyCompany)
                            {
                                <div class="alert alert-danger" role="alert" style="border: 1px solid #b30000;">
                                    <span class="glyphicon glyphicon-exclamation-sign" aria-hidden="true"></span>
                                    <span class="sr-only">Error:</span>
                                    This user does not associate with any company, user company suspended or user company inactivated.
                                </div>
                            }
                        }

                        <!--Username-->
                        <div class="control-group">
                            <div class="controls">
                                @Html.TextBoxFor(m => m.objUser.Username, new { @placeholder = "Username", @class = "username", @tabindex = "1" })
                                @Html.ValidationMessageFor(m => m.objUser.Username)
                            </div>
                        </div>
                        <!--Password-->
                        <div class="control-group">
                            <div class="controls">
                                @Html.PasswordFor(m => m.objUser.Password, new { @placeholder = "Password", @class = "password", @tabindex = "2" })
                                @Html.ValidationMessageFor(m => m.objUser.Password)
                            </div>
                        </div>

                        <div class="form-actions">
                            <button class="btn btn-primary btn-block btn-large" data-loading-text="Signing In ..." tabindex="3" type="submit">
                                Sign In
                            </button>
                        </div>

                        string version = "Software Release V" + RemoteConsolePortalConfiguration.AppConfiguration.ReleaseMajor + "." + RemoteConsolePortalConfiguration.AppConfiguration.ReleaseMinor + "." + RemoteConsolePortalConfiguration.AppConfiguration.ReleasePatch;
                        <span style="margin-top: 2px; color: #8c8c8c; font-size: 11px;" class="pull-right">@version</span>
                    }
                }
                else
                {
                    using (Html.BeginForm("SelectCompany", "Auth", FormMethod.Post, new { @class = "form-vertical", id = "formSelectCompany" }))
                    {
                        @Html.HiddenFor(m => m.UserId)
                        <div class="back-login-header">
                            <h1>Select Company</h1>
                        </div>
                        <div class="alert alert-info" role="alert" style="border: 1px solid #00b0e6;">
                            <span class="sr-only">Info:</span>
                            You're associated with several companies. Please select from below dropdown to which company you want to login.
                        </div>
                        <div style="margin-bottom: 25px;">
                            <label for="ddlCMSes" style="padding-top: 5px; margin-right: 5px;font-weight:normal;">Select Company</label>
                            @Html.DropDownListFor((m => m.SelectedCompany), new SelectList(Model.Companies, "Key", "Value"), new { id = "ddlCompanies" })
                        </div>
                        <div class="form-actions">
                            <button class="btn btn-primary btn-block btn-large" data-loading-text="Selecting company ..." tabindex="4" type="submit">
                                Select Company
                            </button>
                        </div>
                    }
                }
            </div>
            <!-- Scripts -->
            <script type="text/javascript">
                $(document).ready(function () {
                    $('#ddlCompanies').chosen({ width: '60%' });

                    var highestIntervalId = setInterval(";");
                    for (var i = 0 ; i < highestIntervalId ; i++) {
                        clearInterval(i);
                    }
                });

                var querystring = location.search.replace('?', '').split('&');
                var queryObj = {};
                for (var i = 0; i < querystring.length; i++) {
                    var name = querystring[i].split('=')[0];
                    var value = querystring[i].split('=')[1];
                    queryObj[name] = value;
                }
                if (queryObj["isto"] === "true") {
                    $('#dvSTO').show();
                }
            </script>*@
</body>
</html>
